package br.com.reservationmanager.model.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public class Reservation {

	private Integer roomNumber;
	private Date checkIn;
	private Date checkOut;

	/*
	 * The sdf property is being declared as static so that a new SimpleDateFormat
	 * is not created for each class instance. In this case, we will only need one.
	 */
	private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	public Reservation() {
	}

	public Reservation(Integer roomNumber, Date checkIn, Date checkOut) {
		super();
		this.roomNumber = roomNumber;
		this.checkIn = checkIn;
		this.checkOut = checkOut;
	}

	public Integer getRoomNumber() {
		return roomNumber;
	}

	public void setRoomNumber(Integer roomNumber) {
		this.roomNumber = roomNumber;
	}

	public Date getCheckin() {
		return checkIn;
	}

	public Date getCheckout() {
		return checkOut;
	}

	// Methods
	public long duration() {
		/*
		 * Difference between two dates in miliseconds The result of the operation is a
		 * long
		 */
		long diff = checkOut.getTime() - checkIn.getTime();
		// Converting the total miliseconds to days
		return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);

	}

	public void updateDates(Date checkIn, Date checkOut) {

		Date now = new Date();
		if(checkIn.before(now) || checkOut.before(now)) {
			throw new DomainExcetion("Reservation dates for update must be future dates");
		}
		if(!checkOut.after(checkIn)) {
			throw new IllegalArgumentException("Check-out date must be after check-in date");
		}
		this.checkIn = checkIn;
		this.checkOut = checkOut;
	}

	@Override
	public String toString() {
		return "Room "
				+ roomNumber 
				+ ", check-in: "
				+ sdf.format(checkIn) 
				+ " ," 
				+ duration()
				+ " nigths ";

	}

}
